/* CENTRAL_IO_H
 * 
 * author: Yuxuan Jiang | CS225 Group10
 * 
 * Description:
 * This file defines the IO haviour of the central heap 
 * 1. for receiving registrations from local registries.
 * 2. for report generating 
 * 
 */
#ifndef CENTRAL_IO_H
#define CENTRAL_IO_H
#include <fstream>
#include <string>
#include <queue>
#include <vector>
#include <fstream>
#include "../fibheap_f.h"
#include "../assqueue/assignment.h"
#include "../../ex1/relation.h"
#include "../../ex3/BPlusTree&Hash/hashtable.hpp"
using namespace std;

registration* Reg_Relation_Delete(int64_t ID);
void Reg_Relation_Insert(registration* Reg);
registration* Reg_Relation_Retrieve(int64_t ID);
vector<registration*>& Reg_Relation_Retrieve_2(int8_t withdraw);
vector<registration*>& Reg_Relation_Retrieve_3(bool assigned);
void Per_Relation_Insert(person* Per);
person* Per_Relation_Delete(int64_t ID);
person* Per_Relation_Retrieve(int64_t ID);
void Tre_Relation_Insert(treatment* Tre);
treatment* Tre_Relation_Delete(int64_t ID);
treatment* Tre_Relation_Retrieve(int64_t ID);
vector<treatment*>& Tre_Relation_Retrieve_2(int64_t week);

extern hashtable<int8_t, int64_t> reg_withdraw;
extern hashtable<bool, int64_t> reg_assigned;


class PrintInfo;
// TODO: ADD this class as a friend class of FibHeap
class CentralIO{
    public:
        CentralIO(FibHeap* n_vacc_heap, FibHeap* n_surg_heap, FibHeap* n_regi_heap, string n_path, Assignment* n_assignment)
                    : vacc_heap(n_vacc_heap)
                    , surg_heap(n_surg_heap)
                    , regi_heap(n_regi_heap)
                    , path(n_path)
                    , assignment(n_assignment) {};
        bool Read2Heap();   // This function reads registration information from files generated by local registries, the return value implies whether the operation succeeds
        bool ReportWeekly(int week,int key);
        bool ReportMonthly(int month, int key);
        bool compare(PrintInfo* a, PrintInfo* b, int key);
        void sortByKey(vector<PrintInfo*>& info_list,int key);       //TODO sortbykey
        bool Write2File(vector<PrintInfo*>& print_list, int date, int type);
        int IO_timer = 1;   // this timer is in sync with the one in Central_Main


    private:
        // ======= Modification =======
        FibHeap* vacc_heap;   // heap for vaccination
        FibHeap* surg_heap;   // heap for surgery
        FibHeap* regi_heap;   // heap for regular registration
        // ======= Modification =======
        string path;
        Assignment* assignment;
        // vector<vector> register_arr;
        bool _WeeklyCured(int week, int key);
        bool _WeeklyAssigned(int week, int key);
        bool _WeeklyQueueing(int week, int key);
        bool _Monthly(int month, int key);
};

// Packing all info needed to be printed into a single class 
class PrintInfo {
    public:
        friend class CentralIO;
        PrintInfo (registration* Reg, int64_t time_now){
            reg_id = Reg->getID();
            per_id = Reg->getPersonID();
            tre_id = Reg->getTreatmentID();
            treatment_type = Reg->getTreatmentType();
            date_of_reg = Reg->getDateOfReg();

            if (Reg->getAssignStatus()){
                waiting_time = Reg->getAssignedTime() - stoi(date_of_reg);
            } else {
                waiting_time = time_now - stoi(date_of_reg);
            }
            person* Per = Per_Relation_Retrieve(per_id);

            if (Per == NULL) {
                cout << "You're FUCKed at printing " << reg_id << "\n";
                return;
            }
            
            name = Per->getName();
            risk_status = Per->getMedicalStatusID();
        }
        void print(ofstream& out) {
            out << reg_id << "," << "per_id" << "," << "tre_id"
            << "," << (int64_t) treatment_type << "," << name 
            << "," << risk_status << "," << date_of_reg 
            << "," << waiting_time;
        }
    private:
        int64_t         reg_id;
        int64_t         per_id;
        int64_t         tre_id;
        int8_t          treatment_type;
        string          name;
        string          risk_status;
        string          date_of_reg;
        int64_t         waiting_time;
};

#endif